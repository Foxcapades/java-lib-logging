plugins { id "com.jfrog.bintray" version "1.7.1" }

class Wrap {
  Node wrapped;
  Wrap parent;
  Wrap( Node node ) { wrapped = node; }
  Wrap( Node node, Wrap parent ) { this.wrapped = node; this.parent = parent; }
  Wrap contained( node, Map children ) {
    Node c = wrapped.appendNode(node);
    children.forEach({ tag, content -> c.appendNode(tag, content) });
    return new Wrap(c, this)
  };
  Wrap nested( newNode, ... childNodes ) {
    Node appended = wrapped.appendNode(newNode);
    for (def child : childNodes) appended.append(child);
    return new Wrap(appended, this)
  };
  Wrap append( name, value ) { def n = wrapped.appendNode(name, value); return new Wrap(n, this) };
  Wrap up() { return parent }
}

def organization = [
  title: "Vulpine IO",
  site: "https://github.com/Vulpine-IO",
  slug: "io.vulpine",
  key: "Vulpine-IO"
];

def config = [
  group: "${organization.slug}.lib",
  name: 'logging',
  version: '0.1.1',
  groupKey: 'Vulpine-IO',
  repo: 'logging',
  site: "${organization.site}/logging",
  vcs: "${organization.site}/logging.git",
  tracker: "${organization.site}/logging/issues",
  jvm: '1.6'
];


apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'jacoco'

group config.group
version config.version

sourceCompatibility = config.jvm
targetCompatibility = config.jvm

/*
 * JaCoCo Configuration
 */
jacoco {
  toolVersion = "0.7.6.201602180812"
  reportsDir = file("${buildDir}/reports/jacoco")
}

jacocoTestReport {
  reports {
    xml.enabled true
    html.enabled false
  }
}

/*
 * BinTray Configuration
 */
bintray {
  user = System.getenv('BINTRAY_USER')
  key  = System.getenv('BINTRAY_KEY')
  publications = [ 'maven' ]
  pkg {
    repo = 'maven'
    name = config.name
    userOrg = 'vpx'
    licenses = [ 'Apache-2.0' ]
    vcsUrl = config.site
    version {
      name = config.version
      released = new Date()
      vcsTag = config.version
    }
  }
}

repositories {
  mavenCentral()
}

/*
 * Logging Framework APIs are only required to compile, this library should
 * not come with any runtime dependencies.
 */
configurations {
}

dependencies {
  compileOnly(
    [ group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.6.2'  ],
    [ group: 'org.slf4j',                name: 'slf4j-api', version: '1.7.21' ]
  )
}

/*
 * Tasks
 */

task wrapper(type: Wrapper) {
  gradleVersion = '3.0'
  distributionUrl = "https://services.gradle.org/distributions/gradle-$gradleVersion-all.zip"
}

task sourceJar(type: Jar, dependsOn: classes) {
  classifier = 'sources'
  from sourceSets.main.allSource
}

task javadoc(overwrite: true, type: Javadoc) {
  source = sourceSets.main.allJava
  destinationDir = file("${project.projectDir}/docs/")
}

task javadocJar(type: Jar, dependsOn: javadoc) {
  classifier = 'javadoc'
  from javadoc.destinationDir
}

artifacts {
  archives sourceJar
  archives javadocJar
}

publishing {
  repositories { maven { url "https://api.bintray.com/maven/vpx/maven/${config.name}/;publish=1" } }
  publications {
    maven(MavenPublication) {

      from components.java;

      artifact sourceJar
      artifact javadocJar

      pom.withXml {
        { Node project ->
          new Wrap(project)
            .append('inceptionYear', '2016').up()
            .contained('organization', [ name: organization.title, url: organization.site ]).up()
            .nested('developers')
            .contained(
            'developer',
            [ id: 'elliefops', name: 'Elizabeth Harper', email: 'elliefops@gmail.com' ]
          ).up().up()
            .contained('issueManagement', [
            system: 'Issue Tracker',
            url: config.tracker
          ])
            .up()
            .contained('ciManagement', [ system: 'Travis CI', url: "https://travis-ci.org/${config.groupKey}" ]).up()
            .contained('scm', [
            connection: "scm:git:${config.vcs}",
            developerConnection: "scm:git:${config.vcs}",
            tag: 'master',
            url: config.site
          ]
          ).up()
            .nested('licenses')
            .contained('license', [
            name: 'Apache License, Version 2.0',
            url: 'http://www.apache.org/licenses/LICENSE-2.0.txt',
            distribution: 'repo'
          ]
          );
          return project;
        }.call((Node) asNode())
      }
    }
  }
}
